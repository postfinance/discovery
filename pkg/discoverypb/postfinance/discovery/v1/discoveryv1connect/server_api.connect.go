// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: postfinance/discovery/v1/server_api.proto

package discoveryv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/postfinance/discovery/pkg/discoverypb/postfinance/discovery/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ServerAPIName is the fully-qualified name of the ServerAPI service.
	ServerAPIName = "postfinance.discovery.v1.ServerAPI"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServerAPIRegisterServerProcedure is the fully-qualified name of the ServerAPI's RegisterServer
	// RPC.
	ServerAPIRegisterServerProcedure = "/postfinance.discovery.v1.ServerAPI/RegisterServer"
	// ServerAPIUnregisterServerProcedure is the fully-qualified name of the ServerAPI's
	// UnregisterServer RPC.
	ServerAPIUnregisterServerProcedure = "/postfinance.discovery.v1.ServerAPI/UnregisterServer"
	// ServerAPIListServerProcedure is the fully-qualified name of the ServerAPI's ListServer RPC.
	ServerAPIListServerProcedure = "/postfinance.discovery.v1.ServerAPI/ListServer"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	serverAPIServiceDescriptor                = v1.File_postfinance_discovery_v1_server_api_proto.Services().ByName("ServerAPI")
	serverAPIRegisterServerMethodDescriptor   = serverAPIServiceDescriptor.Methods().ByName("RegisterServer")
	serverAPIUnregisterServerMethodDescriptor = serverAPIServiceDescriptor.Methods().ByName("UnregisterServer")
	serverAPIListServerMethodDescriptor       = serverAPIServiceDescriptor.Methods().ByName("ListServer")
)

// ServerAPIClient is a client for the postfinance.discovery.v1.ServerAPI service.
type ServerAPIClient interface {
	// RegisterServer registers a server.
	RegisterServer(context.Context, *connect.Request[v1.RegisterServerRequest]) (*connect.Response[v1.RegisterServerResponse], error)
	// UnRegisterServer unregisters a server.
	UnregisterServer(context.Context, *connect.Request[v1.UnregisterServerRequest]) (*connect.Response[v1.UnregisterServerResponse], error)
	// ListServer lists all servers.
	ListServer(context.Context, *connect.Request[v1.ListServerRequest]) (*connect.Response[v1.ListServerResponse], error)
}

// NewServerAPIClient constructs a client for the postfinance.discovery.v1.ServerAPI service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServerAPIClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ServerAPIClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &serverAPIClient{
		registerServer: connect.NewClient[v1.RegisterServerRequest, v1.RegisterServerResponse](
			httpClient,
			baseURL+ServerAPIRegisterServerProcedure,
			connect.WithSchema(serverAPIRegisterServerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		unregisterServer: connect.NewClient[v1.UnregisterServerRequest, v1.UnregisterServerResponse](
			httpClient,
			baseURL+ServerAPIUnregisterServerProcedure,
			connect.WithSchema(serverAPIUnregisterServerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listServer: connect.NewClient[v1.ListServerRequest, v1.ListServerResponse](
			httpClient,
			baseURL+ServerAPIListServerProcedure,
			connect.WithSchema(serverAPIListServerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// serverAPIClient implements ServerAPIClient.
type serverAPIClient struct {
	registerServer   *connect.Client[v1.RegisterServerRequest, v1.RegisterServerResponse]
	unregisterServer *connect.Client[v1.UnregisterServerRequest, v1.UnregisterServerResponse]
	listServer       *connect.Client[v1.ListServerRequest, v1.ListServerResponse]
}

// RegisterServer calls postfinance.discovery.v1.ServerAPI.RegisterServer.
func (c *serverAPIClient) RegisterServer(ctx context.Context, req *connect.Request[v1.RegisterServerRequest]) (*connect.Response[v1.RegisterServerResponse], error) {
	return c.registerServer.CallUnary(ctx, req)
}

// UnregisterServer calls postfinance.discovery.v1.ServerAPI.UnregisterServer.
func (c *serverAPIClient) UnregisterServer(ctx context.Context, req *connect.Request[v1.UnregisterServerRequest]) (*connect.Response[v1.UnregisterServerResponse], error) {
	return c.unregisterServer.CallUnary(ctx, req)
}

// ListServer calls postfinance.discovery.v1.ServerAPI.ListServer.
func (c *serverAPIClient) ListServer(ctx context.Context, req *connect.Request[v1.ListServerRequest]) (*connect.Response[v1.ListServerResponse], error) {
	return c.listServer.CallUnary(ctx, req)
}

// ServerAPIHandler is an implementation of the postfinance.discovery.v1.ServerAPI service.
type ServerAPIHandler interface {
	// RegisterServer registers a server.
	RegisterServer(context.Context, *connect.Request[v1.RegisterServerRequest]) (*connect.Response[v1.RegisterServerResponse], error)
	// UnRegisterServer unregisters a server.
	UnregisterServer(context.Context, *connect.Request[v1.UnregisterServerRequest]) (*connect.Response[v1.UnregisterServerResponse], error)
	// ListServer lists all servers.
	ListServer(context.Context, *connect.Request[v1.ListServerRequest]) (*connect.Response[v1.ListServerResponse], error)
}

// NewServerAPIHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServerAPIHandler(svc ServerAPIHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	serverAPIRegisterServerHandler := connect.NewUnaryHandler(
		ServerAPIRegisterServerProcedure,
		svc.RegisterServer,
		connect.WithSchema(serverAPIRegisterServerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serverAPIUnregisterServerHandler := connect.NewUnaryHandler(
		ServerAPIUnregisterServerProcedure,
		svc.UnregisterServer,
		connect.WithSchema(serverAPIUnregisterServerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serverAPIListServerHandler := connect.NewUnaryHandler(
		ServerAPIListServerProcedure,
		svc.ListServer,
		connect.WithSchema(serverAPIListServerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/postfinance.discovery.v1.ServerAPI/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServerAPIRegisterServerProcedure:
			serverAPIRegisterServerHandler.ServeHTTP(w, r)
		case ServerAPIUnregisterServerProcedure:
			serverAPIUnregisterServerHandler.ServeHTTP(w, r)
		case ServerAPIListServerProcedure:
			serverAPIListServerHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServerAPIHandler returns CodeUnimplemented from all methods.
type UnimplementedServerAPIHandler struct{}

func (UnimplementedServerAPIHandler) RegisterServer(context.Context, *connect.Request[v1.RegisterServerRequest]) (*connect.Response[v1.RegisterServerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("postfinance.discovery.v1.ServerAPI.RegisterServer is not implemented"))
}

func (UnimplementedServerAPIHandler) UnregisterServer(context.Context, *connect.Request[v1.UnregisterServerRequest]) (*connect.Response[v1.UnregisterServerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("postfinance.discovery.v1.ServerAPI.UnregisterServer is not implemented"))
}

func (UnimplementedServerAPIHandler) ListServer(context.Context, *connect.Request[v1.ListServerRequest]) (*connect.Response[v1.ListServerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("postfinance.discovery.v1.ServerAPI.ListServer is not implemented"))
}
