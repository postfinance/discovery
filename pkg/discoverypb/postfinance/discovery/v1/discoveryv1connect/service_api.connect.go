// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: postfinance/discovery/v1/service_api.proto

package discoveryv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/postfinance/discovery/pkg/discoverypb/postfinance/discovery/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ServiceAPIName is the fully-qualified name of the ServiceAPI service.
	ServiceAPIName = "postfinance.discovery.v1.ServiceAPI"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServiceAPIRegisterServiceProcedure is the fully-qualified name of the ServiceAPI's
	// RegisterService RPC.
	ServiceAPIRegisterServiceProcedure = "/postfinance.discovery.v1.ServiceAPI/RegisterService"
	// ServiceAPIUnRegisterServiceProcedure is the fully-qualified name of the ServiceAPI's
	// UnRegisterService RPC.
	ServiceAPIUnRegisterServiceProcedure = "/postfinance.discovery.v1.ServiceAPI/UnRegisterService"
	// ServiceAPIListServiceProcedure is the fully-qualified name of the ServiceAPI's ListService RPC.
	ServiceAPIListServiceProcedure = "/postfinance.discovery.v1.ServiceAPI/ListService"
	// ServiceAPIListTargetGroupProcedure is the fully-qualified name of the ServiceAPI's
	// ListTargetGroup RPC.
	ServiceAPIListTargetGroupProcedure = "/postfinance.discovery.v1.ServiceAPI/ListTargetGroup"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	serviceAPIServiceDescriptor                 = v1.File_postfinance_discovery_v1_service_api_proto.Services().ByName("ServiceAPI")
	serviceAPIRegisterServiceMethodDescriptor   = serviceAPIServiceDescriptor.Methods().ByName("RegisterService")
	serviceAPIUnRegisterServiceMethodDescriptor = serviceAPIServiceDescriptor.Methods().ByName("UnRegisterService")
	serviceAPIListServiceMethodDescriptor       = serviceAPIServiceDescriptor.Methods().ByName("ListService")
	serviceAPIListTargetGroupMethodDescriptor   = serviceAPIServiceDescriptor.Methods().ByName("ListTargetGroup")
)

// ServiceAPIClient is a client for the postfinance.discovery.v1.ServiceAPI service.
type ServiceAPIClient interface {
	// RegisterService registers a service.
	RegisterService(context.Context, *connect.Request[v1.RegisterServiceRequest]) (*connect.Response[v1.RegisterServiceResponse], error)
	// UnRegisterService unregisters a service.
	UnRegisterService(context.Context, *connect.Request[v1.UnRegisterServiceRequest]) (*connect.Response[v1.UnRegisterServiceResponse], error)
	// ListService lists all services.
	ListService(context.Context, *connect.Request[v1.ListServiceRequest]) (*connect.Response[v1.ListServiceResponse], error)
	// ListTargetGroup converts services to prometheus target groups. Those can
	// be used for http_sd (see: https://prometheus.io/docs/prometheus/latest/http_sd/
	// for more information).
	ListTargetGroup(context.Context, *connect.Request[v1.ListTargetGroupRequest]) (*connect.Response[v1.ListTargetGroupResponse], error)
}

// NewServiceAPIClient constructs a client for the postfinance.discovery.v1.ServiceAPI service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServiceAPIClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ServiceAPIClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &serviceAPIClient{
		registerService: connect.NewClient[v1.RegisterServiceRequest, v1.RegisterServiceResponse](
			httpClient,
			baseURL+ServiceAPIRegisterServiceProcedure,
			connect.WithSchema(serviceAPIRegisterServiceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		unRegisterService: connect.NewClient[v1.UnRegisterServiceRequest, v1.UnRegisterServiceResponse](
			httpClient,
			baseURL+ServiceAPIUnRegisterServiceProcedure,
			connect.WithSchema(serviceAPIUnRegisterServiceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listService: connect.NewClient[v1.ListServiceRequest, v1.ListServiceResponse](
			httpClient,
			baseURL+ServiceAPIListServiceProcedure,
			connect.WithSchema(serviceAPIListServiceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listTargetGroup: connect.NewClient[v1.ListTargetGroupRequest, v1.ListTargetGroupResponse](
			httpClient,
			baseURL+ServiceAPIListTargetGroupProcedure,
			connect.WithSchema(serviceAPIListTargetGroupMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// serviceAPIClient implements ServiceAPIClient.
type serviceAPIClient struct {
	registerService   *connect.Client[v1.RegisterServiceRequest, v1.RegisterServiceResponse]
	unRegisterService *connect.Client[v1.UnRegisterServiceRequest, v1.UnRegisterServiceResponse]
	listService       *connect.Client[v1.ListServiceRequest, v1.ListServiceResponse]
	listTargetGroup   *connect.Client[v1.ListTargetGroupRequest, v1.ListTargetGroupResponse]
}

// RegisterService calls postfinance.discovery.v1.ServiceAPI.RegisterService.
func (c *serviceAPIClient) RegisterService(ctx context.Context, req *connect.Request[v1.RegisterServiceRequest]) (*connect.Response[v1.RegisterServiceResponse], error) {
	return c.registerService.CallUnary(ctx, req)
}

// UnRegisterService calls postfinance.discovery.v1.ServiceAPI.UnRegisterService.
func (c *serviceAPIClient) UnRegisterService(ctx context.Context, req *connect.Request[v1.UnRegisterServiceRequest]) (*connect.Response[v1.UnRegisterServiceResponse], error) {
	return c.unRegisterService.CallUnary(ctx, req)
}

// ListService calls postfinance.discovery.v1.ServiceAPI.ListService.
func (c *serviceAPIClient) ListService(ctx context.Context, req *connect.Request[v1.ListServiceRequest]) (*connect.Response[v1.ListServiceResponse], error) {
	return c.listService.CallUnary(ctx, req)
}

// ListTargetGroup calls postfinance.discovery.v1.ServiceAPI.ListTargetGroup.
func (c *serviceAPIClient) ListTargetGroup(ctx context.Context, req *connect.Request[v1.ListTargetGroupRequest]) (*connect.Response[v1.ListTargetGroupResponse], error) {
	return c.listTargetGroup.CallUnary(ctx, req)
}

// ServiceAPIHandler is an implementation of the postfinance.discovery.v1.ServiceAPI service.
type ServiceAPIHandler interface {
	// RegisterService registers a service.
	RegisterService(context.Context, *connect.Request[v1.RegisterServiceRequest]) (*connect.Response[v1.RegisterServiceResponse], error)
	// UnRegisterService unregisters a service.
	UnRegisterService(context.Context, *connect.Request[v1.UnRegisterServiceRequest]) (*connect.Response[v1.UnRegisterServiceResponse], error)
	// ListService lists all services.
	ListService(context.Context, *connect.Request[v1.ListServiceRequest]) (*connect.Response[v1.ListServiceResponse], error)
	// ListTargetGroup converts services to prometheus target groups. Those can
	// be used for http_sd (see: https://prometheus.io/docs/prometheus/latest/http_sd/
	// for more information).
	ListTargetGroup(context.Context, *connect.Request[v1.ListTargetGroupRequest]) (*connect.Response[v1.ListTargetGroupResponse], error)
}

// NewServiceAPIHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServiceAPIHandler(svc ServiceAPIHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	serviceAPIRegisterServiceHandler := connect.NewUnaryHandler(
		ServiceAPIRegisterServiceProcedure,
		svc.RegisterService,
		connect.WithSchema(serviceAPIRegisterServiceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceAPIUnRegisterServiceHandler := connect.NewUnaryHandler(
		ServiceAPIUnRegisterServiceProcedure,
		svc.UnRegisterService,
		connect.WithSchema(serviceAPIUnRegisterServiceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceAPIListServiceHandler := connect.NewUnaryHandler(
		ServiceAPIListServiceProcedure,
		svc.ListService,
		connect.WithSchema(serviceAPIListServiceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceAPIListTargetGroupHandler := connect.NewUnaryHandler(
		ServiceAPIListTargetGroupProcedure,
		svc.ListTargetGroup,
		connect.WithSchema(serviceAPIListTargetGroupMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/postfinance.discovery.v1.ServiceAPI/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServiceAPIRegisterServiceProcedure:
			serviceAPIRegisterServiceHandler.ServeHTTP(w, r)
		case ServiceAPIUnRegisterServiceProcedure:
			serviceAPIUnRegisterServiceHandler.ServeHTTP(w, r)
		case ServiceAPIListServiceProcedure:
			serviceAPIListServiceHandler.ServeHTTP(w, r)
		case ServiceAPIListTargetGroupProcedure:
			serviceAPIListTargetGroupHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServiceAPIHandler returns CodeUnimplemented from all methods.
type UnimplementedServiceAPIHandler struct{}

func (UnimplementedServiceAPIHandler) RegisterService(context.Context, *connect.Request[v1.RegisterServiceRequest]) (*connect.Response[v1.RegisterServiceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("postfinance.discovery.v1.ServiceAPI.RegisterService is not implemented"))
}

func (UnimplementedServiceAPIHandler) UnRegisterService(context.Context, *connect.Request[v1.UnRegisterServiceRequest]) (*connect.Response[v1.UnRegisterServiceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("postfinance.discovery.v1.ServiceAPI.UnRegisterService is not implemented"))
}

func (UnimplementedServiceAPIHandler) ListService(context.Context, *connect.Request[v1.ListServiceRequest]) (*connect.Response[v1.ListServiceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("postfinance.discovery.v1.ServiceAPI.ListService is not implemented"))
}

func (UnimplementedServiceAPIHandler) ListTargetGroup(context.Context, *connect.Request[v1.ListTargetGroupRequest]) (*connect.Response[v1.ListTargetGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("postfinance.discovery.v1.ServiceAPI.ListTargetGroup is not implemented"))
}
