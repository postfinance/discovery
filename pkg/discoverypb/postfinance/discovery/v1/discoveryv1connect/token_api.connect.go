// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: postfinance/discovery/v1/token_api.proto

package discoveryv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/postfinance/discovery/pkg/discoverypb/postfinance/discovery/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TokenAPIName is the fully-qualified name of the TokenAPI service.
	TokenAPIName = "postfinance.discovery.v1.TokenAPI"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TokenAPICreateProcedure is the fully-qualified name of the TokenAPI's Create RPC.
	TokenAPICreateProcedure = "/postfinance.discovery.v1.TokenAPI/Create"
	// TokenAPIInfoProcedure is the fully-qualified name of the TokenAPI's Info RPC.
	TokenAPIInfoProcedure = "/postfinance.discovery.v1.TokenAPI/Info"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	tokenAPIServiceDescriptor      = v1.File_postfinance_discovery_v1_token_api_proto.Services().ByName("TokenAPI")
	tokenAPICreateMethodDescriptor = tokenAPIServiceDescriptor.Methods().ByName("Create")
	tokenAPIInfoMethodDescriptor   = tokenAPIServiceDescriptor.Methods().ByName("Info")
)

// TokenAPIClient is a client for the postfinance.discovery.v1.TokenAPI service.
type TokenAPIClient interface {
	// Create creates a token.
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	// Info gives token information.
	Info(context.Context, *connect.Request[v1.InfoRequest]) (*connect.Response[v1.InfoResponse], error)
}

// NewTokenAPIClient constructs a client for the postfinance.discovery.v1.TokenAPI service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTokenAPIClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TokenAPIClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &tokenAPIClient{
		create: connect.NewClient[v1.CreateRequest, v1.CreateResponse](
			httpClient,
			baseURL+TokenAPICreateProcedure,
			connect.WithSchema(tokenAPICreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		info: connect.NewClient[v1.InfoRequest, v1.InfoResponse](
			httpClient,
			baseURL+TokenAPIInfoProcedure,
			connect.WithSchema(tokenAPIInfoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// tokenAPIClient implements TokenAPIClient.
type tokenAPIClient struct {
	create *connect.Client[v1.CreateRequest, v1.CreateResponse]
	info   *connect.Client[v1.InfoRequest, v1.InfoResponse]
}

// Create calls postfinance.discovery.v1.TokenAPI.Create.
func (c *tokenAPIClient) Create(ctx context.Context, req *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Info calls postfinance.discovery.v1.TokenAPI.Info.
func (c *tokenAPIClient) Info(ctx context.Context, req *connect.Request[v1.InfoRequest]) (*connect.Response[v1.InfoResponse], error) {
	return c.info.CallUnary(ctx, req)
}

// TokenAPIHandler is an implementation of the postfinance.discovery.v1.TokenAPI service.
type TokenAPIHandler interface {
	// Create creates a token.
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	// Info gives token information.
	Info(context.Context, *connect.Request[v1.InfoRequest]) (*connect.Response[v1.InfoResponse], error)
}

// NewTokenAPIHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTokenAPIHandler(svc TokenAPIHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tokenAPICreateHandler := connect.NewUnaryHandler(
		TokenAPICreateProcedure,
		svc.Create,
		connect.WithSchema(tokenAPICreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tokenAPIInfoHandler := connect.NewUnaryHandler(
		TokenAPIInfoProcedure,
		svc.Info,
		connect.WithSchema(tokenAPIInfoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/postfinance.discovery.v1.TokenAPI/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TokenAPICreateProcedure:
			tokenAPICreateHandler.ServeHTTP(w, r)
		case TokenAPIInfoProcedure:
			tokenAPIInfoHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTokenAPIHandler returns CodeUnimplemented from all methods.
type UnimplementedTokenAPIHandler struct{}

func (UnimplementedTokenAPIHandler) Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("postfinance.discovery.v1.TokenAPI.Create is not implemented"))
}

func (UnimplementedTokenAPIHandler) Info(context.Context, *connect.Request[v1.InfoRequest]) (*connect.Response[v1.InfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("postfinance.discovery.v1.TokenAPI.Info is not implemented"))
}
