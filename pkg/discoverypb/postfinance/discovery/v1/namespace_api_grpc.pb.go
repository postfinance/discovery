// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: postfinance/discovery/v1/namespace_api.proto

package discoveryv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NamespaceAPIClient is the client API for NamespaceAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NamespaceAPIClient interface {
	// RegisterNamespace registers a namespace.
	RegisterNamespace(ctx context.Context, in *RegisterNamespaceRequest, opts ...grpc.CallOption) (*RegisterNamespaceResponse, error)
	// UnRegisterNamespace unregisters a namespace.
	UnregisterNamespace(ctx context.Context, in *UnregisterNamespaceRequest, opts ...grpc.CallOption) (*UnregisterNamespaceResponse, error)
	// ListNamespace lists all namespaces.
	ListNamespace(ctx context.Context, in *ListNamespaceRequest, opts ...grpc.CallOption) (*ListNamespaceResponse, error)
}

type namespaceAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewNamespaceAPIClient(cc grpc.ClientConnInterface) NamespaceAPIClient {
	return &namespaceAPIClient{cc}
}

func (c *namespaceAPIClient) RegisterNamespace(ctx context.Context, in *RegisterNamespaceRequest, opts ...grpc.CallOption) (*RegisterNamespaceResponse, error) {
	out := new(RegisterNamespaceResponse)
	err := c.cc.Invoke(ctx, "/postfinance.discovery.v1.NamespaceAPI/RegisterNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceAPIClient) UnregisterNamespace(ctx context.Context, in *UnregisterNamespaceRequest, opts ...grpc.CallOption) (*UnregisterNamespaceResponse, error) {
	out := new(UnregisterNamespaceResponse)
	err := c.cc.Invoke(ctx, "/postfinance.discovery.v1.NamespaceAPI/UnregisterNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceAPIClient) ListNamespace(ctx context.Context, in *ListNamespaceRequest, opts ...grpc.CallOption) (*ListNamespaceResponse, error) {
	out := new(ListNamespaceResponse)
	err := c.cc.Invoke(ctx, "/postfinance.discovery.v1.NamespaceAPI/ListNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NamespaceAPIServer is the server API for NamespaceAPI service.
// All implementations must embed UnimplementedNamespaceAPIServer
// for forward compatibility
type NamespaceAPIServer interface {
	// RegisterNamespace registers a namespace.
	RegisterNamespace(context.Context, *RegisterNamespaceRequest) (*RegisterNamespaceResponse, error)
	// UnRegisterNamespace unregisters a namespace.
	UnregisterNamespace(context.Context, *UnregisterNamespaceRequest) (*UnregisterNamespaceResponse, error)
	// ListNamespace lists all namespaces.
	ListNamespace(context.Context, *ListNamespaceRequest) (*ListNamespaceResponse, error)
	mustEmbedUnimplementedNamespaceAPIServer()
}

// UnimplementedNamespaceAPIServer must be embedded to have forward compatible implementations.
type UnimplementedNamespaceAPIServer struct {
}

func (UnimplementedNamespaceAPIServer) RegisterNamespace(context.Context, *RegisterNamespaceRequest) (*RegisterNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNamespace not implemented")
}
func (UnimplementedNamespaceAPIServer) UnregisterNamespace(context.Context, *UnregisterNamespaceRequest) (*UnregisterNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterNamespace not implemented")
}
func (UnimplementedNamespaceAPIServer) ListNamespace(context.Context, *ListNamespaceRequest) (*ListNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespace not implemented")
}
func (UnimplementedNamespaceAPIServer) mustEmbedUnimplementedNamespaceAPIServer() {}

// UnsafeNamespaceAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NamespaceAPIServer will
// result in compilation errors.
type UnsafeNamespaceAPIServer interface {
	mustEmbedUnimplementedNamespaceAPIServer()
}

func RegisterNamespaceAPIServer(s grpc.ServiceRegistrar, srv NamespaceAPIServer) {
	s.RegisterService(&NamespaceAPI_ServiceDesc, srv)
}

func _NamespaceAPI_RegisterNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceAPIServer).RegisterNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postfinance.discovery.v1.NamespaceAPI/RegisterNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceAPIServer).RegisterNamespace(ctx, req.(*RegisterNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceAPI_UnregisterNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceAPIServer).UnregisterNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postfinance.discovery.v1.NamespaceAPI/UnregisterNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceAPIServer).UnregisterNamespace(ctx, req.(*UnregisterNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceAPI_ListNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceAPIServer).ListNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postfinance.discovery.v1.NamespaceAPI/ListNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceAPIServer).ListNamespace(ctx, req.(*ListNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NamespaceAPI_ServiceDesc is the grpc.ServiceDesc for NamespaceAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NamespaceAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "postfinance.discovery.v1.NamespaceAPI",
	HandlerType: (*NamespaceAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterNamespace",
			Handler:    _NamespaceAPI_RegisterNamespace_Handler,
		},
		{
			MethodName: "UnregisterNamespace",
			Handler:    _NamespaceAPI_UnregisterNamespace_Handler,
		},
		{
			MethodName: "ListNamespace",
			Handler:    _NamespaceAPI_ListNamespace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "postfinance/discovery/v1/namespace_api.proto",
}
