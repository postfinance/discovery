// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package discoveryv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerAPIClient is the client API for ServerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerAPIClient interface {
	// RegisterServer registers a server.
	RegisterServer(ctx context.Context, in *RegisterServerRequest, opts ...grpc.CallOption) (*RegisterServerResponse, error)
	// UnRegisterServer unregisters a server.
	UnregisterServer(ctx context.Context, in *UnregisterServerRequest, opts ...grpc.CallOption) (*UnregisterServerResponse, error)
	// ListServer lists all servers.
	ListServer(ctx context.Context, in *ListServerRequest, opts ...grpc.CallOption) (*ListServerResponse, error)
}

type serverAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewServerAPIClient(cc grpc.ClientConnInterface) ServerAPIClient {
	return &serverAPIClient{cc}
}

func (c *serverAPIClient) RegisterServer(ctx context.Context, in *RegisterServerRequest, opts ...grpc.CallOption) (*RegisterServerResponse, error) {
	out := new(RegisterServerResponse)
	err := c.cc.Invoke(ctx, "/postfinance.discovery.v1.ServerAPI/RegisterServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverAPIClient) UnregisterServer(ctx context.Context, in *UnregisterServerRequest, opts ...grpc.CallOption) (*UnregisterServerResponse, error) {
	out := new(UnregisterServerResponse)
	err := c.cc.Invoke(ctx, "/postfinance.discovery.v1.ServerAPI/UnregisterServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverAPIClient) ListServer(ctx context.Context, in *ListServerRequest, opts ...grpc.CallOption) (*ListServerResponse, error) {
	out := new(ListServerResponse)
	err := c.cc.Invoke(ctx, "/postfinance.discovery.v1.ServerAPI/ListServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerAPIServer is the server API for ServerAPI service.
// All implementations must embed UnimplementedServerAPIServer
// for forward compatibility
type ServerAPIServer interface {
	// RegisterServer registers a server.
	RegisterServer(context.Context, *RegisterServerRequest) (*RegisterServerResponse, error)
	// UnRegisterServer unregisters a server.
	UnregisterServer(context.Context, *UnregisterServerRequest) (*UnregisterServerResponse, error)
	// ListServer lists all servers.
	ListServer(context.Context, *ListServerRequest) (*ListServerResponse, error)
	mustEmbedUnimplementedServerAPIServer()
}

// UnimplementedServerAPIServer must be embedded to have forward compatible implementations.
type UnimplementedServerAPIServer struct {
}

func (UnimplementedServerAPIServer) RegisterServer(context.Context, *RegisterServerRequest) (*RegisterServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterServer not implemented")
}
func (UnimplementedServerAPIServer) UnregisterServer(context.Context, *UnregisterServerRequest) (*UnregisterServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterServer not implemented")
}
func (UnimplementedServerAPIServer) ListServer(context.Context, *ListServerRequest) (*ListServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServer not implemented")
}
func (UnimplementedServerAPIServer) mustEmbedUnimplementedServerAPIServer() {}

// UnsafeServerAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerAPIServer will
// result in compilation errors.
type UnsafeServerAPIServer interface {
	mustEmbedUnimplementedServerAPIServer()
}

func RegisterServerAPIServer(s grpc.ServiceRegistrar, srv ServerAPIServer) {
	s.RegisterService(&ServerAPI_ServiceDesc, srv)
}

func _ServerAPI_RegisterServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerAPIServer).RegisterServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postfinance.discovery.v1.ServerAPI/RegisterServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerAPIServer).RegisterServer(ctx, req.(*RegisterServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerAPI_UnregisterServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerAPIServer).UnregisterServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postfinance.discovery.v1.ServerAPI/UnregisterServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerAPIServer).UnregisterServer(ctx, req.(*UnregisterServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerAPI_ListServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerAPIServer).ListServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postfinance.discovery.v1.ServerAPI/ListServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerAPIServer).ListServer(ctx, req.(*ListServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerAPI_ServiceDesc is the grpc.ServiceDesc for ServerAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "postfinance.discovery.v1.ServerAPI",
	HandlerType: (*ServerAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterServer",
			Handler:    _ServerAPI_RegisterServer_Handler,
		},
		{
			MethodName: "UnregisterServer",
			Handler:    _ServerAPI_UnregisterServer_Handler,
		},
		{
			MethodName: "ListServer",
			Handler:    _ServerAPI_ListServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "postfinance/discovery/v1/server_api.proto",
}
