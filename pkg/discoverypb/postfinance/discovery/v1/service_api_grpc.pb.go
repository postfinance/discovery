// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: postfinance/discovery/v1/service_api.proto

package discoveryv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceAPIClient is the client API for ServiceAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceAPIClient interface {
	// RegisterService registers a service.
	RegisterService(ctx context.Context, in *RegisterServiceRequest, opts ...grpc.CallOption) (*RegisterServiceResponse, error)
	// UnRegisterService unregisters a service.
	UnRegisterService(ctx context.Context, in *UnRegisterServiceRequest, opts ...grpc.CallOption) (*UnRegisterServiceResponse, error)
	// ListService lists all services.
	ListService(ctx context.Context, in *ListServiceRequest, opts ...grpc.CallOption) (*ListServiceResponse, error)
	// ListTargetGroup converts services to prometheus target groups. Those can
	// be used for http_sd (see: https://prometheus.io/docs/prometheus/latest/http_sd/
	// for more information).
	ListTargetGroup(ctx context.Context, in *ListTargetGroupRequest, opts ...grpc.CallOption) (*ListTargetGroupResponse, error)
}

type serviceAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceAPIClient(cc grpc.ClientConnInterface) ServiceAPIClient {
	return &serviceAPIClient{cc}
}

func (c *serviceAPIClient) RegisterService(ctx context.Context, in *RegisterServiceRequest, opts ...grpc.CallOption) (*RegisterServiceResponse, error) {
	out := new(RegisterServiceResponse)
	err := c.cc.Invoke(ctx, "/postfinance.discovery.v1.ServiceAPI/RegisterService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAPIClient) UnRegisterService(ctx context.Context, in *UnRegisterServiceRequest, opts ...grpc.CallOption) (*UnRegisterServiceResponse, error) {
	out := new(UnRegisterServiceResponse)
	err := c.cc.Invoke(ctx, "/postfinance.discovery.v1.ServiceAPI/UnRegisterService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAPIClient) ListService(ctx context.Context, in *ListServiceRequest, opts ...grpc.CallOption) (*ListServiceResponse, error) {
	out := new(ListServiceResponse)
	err := c.cc.Invoke(ctx, "/postfinance.discovery.v1.ServiceAPI/ListService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAPIClient) ListTargetGroup(ctx context.Context, in *ListTargetGroupRequest, opts ...grpc.CallOption) (*ListTargetGroupResponse, error) {
	out := new(ListTargetGroupResponse)
	err := c.cc.Invoke(ctx, "/postfinance.discovery.v1.ServiceAPI/ListTargetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceAPIServer is the server API for ServiceAPI service.
// All implementations must embed UnimplementedServiceAPIServer
// for forward compatibility
type ServiceAPIServer interface {
	// RegisterService registers a service.
	RegisterService(context.Context, *RegisterServiceRequest) (*RegisterServiceResponse, error)
	// UnRegisterService unregisters a service.
	UnRegisterService(context.Context, *UnRegisterServiceRequest) (*UnRegisterServiceResponse, error)
	// ListService lists all services.
	ListService(context.Context, *ListServiceRequest) (*ListServiceResponse, error)
	// ListTargetGroup converts services to prometheus target groups. Those can
	// be used for http_sd (see: https://prometheus.io/docs/prometheus/latest/http_sd/
	// for more information).
	ListTargetGroup(context.Context, *ListTargetGroupRequest) (*ListTargetGroupResponse, error)
	mustEmbedUnimplementedServiceAPIServer()
}

// UnimplementedServiceAPIServer must be embedded to have forward compatible implementations.
type UnimplementedServiceAPIServer struct {
}

func (UnimplementedServiceAPIServer) RegisterService(context.Context, *RegisterServiceRequest) (*RegisterServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterService not implemented")
}
func (UnimplementedServiceAPIServer) UnRegisterService(context.Context, *UnRegisterServiceRequest) (*UnRegisterServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnRegisterService not implemented")
}
func (UnimplementedServiceAPIServer) ListService(context.Context, *ListServiceRequest) (*ListServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListService not implemented")
}
func (UnimplementedServiceAPIServer) ListTargetGroup(context.Context, *ListTargetGroupRequest) (*ListTargetGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTargetGroup not implemented")
}
func (UnimplementedServiceAPIServer) mustEmbedUnimplementedServiceAPIServer() {}

// UnsafeServiceAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceAPIServer will
// result in compilation errors.
type UnsafeServiceAPIServer interface {
	mustEmbedUnimplementedServiceAPIServer()
}

func RegisterServiceAPIServer(s grpc.ServiceRegistrar, srv ServiceAPIServer) {
	s.RegisterService(&ServiceAPI_ServiceDesc, srv)
}

func _ServiceAPI_RegisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAPIServer).RegisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postfinance.discovery.v1.ServiceAPI/RegisterService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAPIServer).RegisterService(ctx, req.(*RegisterServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAPI_UnRegisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnRegisterServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAPIServer).UnRegisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postfinance.discovery.v1.ServiceAPI/UnRegisterService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAPIServer).UnRegisterService(ctx, req.(*UnRegisterServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAPI_ListService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAPIServer).ListService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postfinance.discovery.v1.ServiceAPI/ListService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAPIServer).ListService(ctx, req.(*ListServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAPI_ListTargetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTargetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAPIServer).ListTargetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postfinance.discovery.v1.ServiceAPI/ListTargetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAPIServer).ListTargetGroup(ctx, req.(*ListTargetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceAPI_ServiceDesc is the grpc.ServiceDesc for ServiceAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "postfinance.discovery.v1.ServiceAPI",
	HandlerType: (*ServiceAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterService",
			Handler:    _ServiceAPI_RegisterService_Handler,
		},
		{
			MethodName: "UnRegisterService",
			Handler:    _ServiceAPI_UnRegisterService_Handler,
		},
		{
			MethodName: "ListService",
			Handler:    _ServiceAPI_ListService_Handler,
		},
		{
			MethodName: "ListTargetGroup",
			Handler:    _ServiceAPI_ListTargetGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "postfinance/discovery/v1/service_api.proto",
}
